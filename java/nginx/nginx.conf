# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/
#   * https://www.cnblogs.com/chenjiahe/p/5956002.html
#   * http://www.ha97.com/5194.html
#   * 

#定义Nginx运行的用户和用户组
user nginx;
#数值和cpu核数个数一致
worker_processes 8; 
#worker与cpu绑定
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ], 例如： error_log /var/log/nginx/error.log info;
error_log /var/log/nginx/error.log;
#进程文件
pid /var/run/nginx.pid;

# Load dynamic modules. See /usr/share/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

#更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的限制。设置后你的操作系统和Nginx可以处理比“ulimit -a”更多的文件，所以把这个值设高，这样nginx就不会有“too many open files”问题了
worker_rlimit_nofile 102400;

#工作模式与连接数上限
events {
    #use 设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用epoll
    use epoll;
    #设置可由一个worker进程同时打开的最大连接数。如果设置了上面提到的worker_rlimit_nofile，我们可以将这个值设得很高。记住，最大客户数也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没什么好处
    worker_connections  102400;
}

#设定http服务器
http {
    #https://blog.csdn.net/plunger2011/article/details/37812843
    #limit_conn_zone来限制并发连接数以及下载带宽 ，   nginx 1.1.8 之后的版本的语法改为limit_conn_zone $binary_remote_addr zone=NAME:10m; NAME 就是 zone 的名字详情请看这里 http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html
    #$binary_remote_addr是限制同一客户端ip地址
    #$server_name是限制同一server最大并发数
    #limit_conn为限制并发连接数
    #limit_rate为限制下载速度
	limit_conn_zone $binary_remote_addr zone=server1:10m;
	limit_conn_zone $server_name zone=perserver:10m;
    #进行限流访问，防止用户恶意攻击刷爆服务器，说明：区域名称为one（自定义），占用空间大小为10m，平均处理的请求频率不能超过每秒一次。
	limit_req_zone  $server_name  zone=one:10m   rate=1r/s;
    #log_format语法格式及参数语法说明如下
    #log_format    <NAME>    <Strin­­­g>;
    #关键字         格式标签   日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #定义本虚拟主机的访问日志
    #access_log语法格式及参数语法说明如下:
    #access_log    <FILE>    <NAME>;
    #关键字         日志文件   格式标签
    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    #主配置文件nginx.conf中指定包含其他扩展配置文件，从而简化nginx主配置文件，实现多个站点功能
    include             /etc/nginx/mime.types;
    #如果Web程序没设置，Nginx也没对应文件的扩展名，就用Nginx 里默认的 default_type定义的处理方式
    default_type        application/octet-stream;

    charset  utf-8;
    #服务器名字的hash表大小
    server_names_hash_bucket_size 128;
    #用于指定来自客户端请求头headerbuffer大小，对于大多数请求，1KB的缓冲区大小已经足够，如果自定义了消息头或有更大的cookie，可以增加缓冲区大小。这里设置为32KB
    client_header_buffer_size 2k;
    #用来指定客户端请求中较大的消息头的缓存最大数量和大小，“4”为个数，“4k”为大小，最大缓存为4个4kB。
    large_client_header_buffers 4 4k;
    #允许客户端请求的最大单文件字节数
    client_max_body_size 8m;

    #设置为on表示启动高效传输文件的模式
    sendfile            on;
    #激活tcp_nopush参数可以允许把httpresponse header和文件的开始放在一个文件里发布，积极的作用是减少网络报文段的数量
    tcp_nopush          on;
    #激活tcp_nodelay，内核会等待将更多的字节组成一个数据包，从而提高I/O性能
    tcp_nodelay         on;
    #连接超时时间，单位是秒
    keepalive_timeout   60;

    open_file_cache max=204800 inactive=20s;
    open_file_cache_min_uses 1;
    open_file_cache_valid 30s;

    ##
    # Gzip Settings
    ##
    gzip on;
    gzip_disable "msie6";
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
}
